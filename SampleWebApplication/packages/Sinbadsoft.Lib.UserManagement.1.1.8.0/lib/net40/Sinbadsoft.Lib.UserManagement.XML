<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sinbadsoft.Lib.UserManagement</name>
    </assembly>
    <members>
        <member name="F:Sinbadsoft.Lib.UserManagement.Authentication.AuthenticationToken.MinTicketLength">
            <summary>
            Minimum email length = 3, min user id length = 1, separator length = 1
            ticket template: "email;id;data" where data is optional.
            </summary>
        </member>
        <member name="M:Sinbadsoft.Lib.UserManagement.IUserManager.Login(System.String,System.String)">
            <summary>
            Attempts to log user in with the provided email and password.
            </summary>
            <param name="email">User email used as unique identifier.</param>
            <param name="password">User password.</param>
            <returns><see cref="F:Sinbadsoft.Lib.UserManagement.LoginResult.Success"/> if login is successful.</returns>
        </member>
        <member name="M:Sinbadsoft.Lib.UserManagement.IUserManager.Register(System.String,System.String,Sinbadsoft.Lib.UserManagement.VerificationToken@)">
             <summary>
             Attempts to register a new user. If registration is successful, it creates a record with the provided
             <paramref name="email"/>, returns <see cref="F:Sinbadsoft.Lib.UserManagement.RegisterResult.Success"/> and sets the verification
             <paramref name="token"/>. The newly created user is pending email verification and won't be able login before
             email verification. See <see cref="M:Sinbadsoft.Lib.UserManagement.IUserManager.CheckAndClearVerificationToken(System.Int32,Sinbadsoft.Lib.UserManagement.VerificationToken,System.String)"/>.
             
             Cases where registration is not successful:
             <list type="bullet">
             <item>If <paramref name="email"/> is marlformed, <see cref="F:Sinbadsoft.Lib.UserManagement.RegisterResult.InvalidEmail"/> is returned. <paramref name="token"/>.</item>
             
             <item>If <paramref name="password"/> is not null, it is checked and <see cref="F:Sinbadsoft.Lib.UserManagement.RegisterResult.InvalidPassword"/> is
             returned for invalid passwords. <paramref name="token"/> is set to default value.</item>
             
             <item>If a user with the given <paramref name="email"/> exist and the corresponding user is flagged as blocked (See <see cref="M:Sinbadsoft.Lib.UserManagement.IUserManager.SetBlocked(System.Int32,System.Boolean)"/>),
             then <see cref="F:Sinbadsoft.Lib.UserManagement.RegisterResult.UserBlocked"/> is returned. <paramref name="token"/> is set to default value.</item>
             <item></item>
            
             <item>If a user with the given <paramref name="email"/> exist and the corresponding user is not blocked,
             then <see cref="F:Sinbadsoft.Lib.UserManagement.RegisterResult.DuplicateEmail"/> is returned.
             <paramref name="token"/> is set to default value.</item>
             </list>
             
             </summary>
             <param name="email">User's email. Should be well formed and unique per user.</param>
             <param name="password">User's password. Can be null and set later using <see cref="M:Sinbadsoft.Lib.UserManagement.IUserManager.CheckAndClearVerificationToken(System.Int32,Sinbadsoft.Lib.UserManagement.VerificationToken,System.String)"/></param>
             <param name="token">Set to the generated email verification token.</param>
             <returns>The status of the registration process.</returns>
        </member>
        <member name="M:Sinbadsoft.Lib.UserManagement.IUserManager.Register(System.String,System.String,Sinbadsoft.Lib.UserManagement.VerificationToken@,System.Int32@)">
             <summary>
             Attempts to register a new user. If registration is successful, it creates a record with the provided
             <paramref name="email"/>, returns <see cref="F:Sinbadsoft.Lib.UserManagement.RegisterResult.Success"/> and sets the verification
             <paramref name="token"/> and the created user identifier <paramref name="id"/>. The newly created user
             is pending email verification and won't be able login before email verification. See <see cref="M:Sinbadsoft.Lib.UserManagement.IUserManager.CheckAndClearVerificationToken(System.Int32,Sinbadsoft.Lib.UserManagement.VerificationToken,System.String)"/>.
             
             Cases where registration is not successful:
             <list type="bullet">
             <item>If <paramref name="email"/> is marlformed, <see cref="F:Sinbadsoft.Lib.UserManagement.RegisterResult.InvalidEmail"/> is returned. <paramref name="token"/>
             and <paramref name="id"/> are set to default values.</item>
             
             <item>If <paramref name="password"/> is not null, it is checked and <see cref="F:Sinbadsoft.Lib.UserManagement.RegisterResult.InvalidPassword"/> is
             returned for invalid passwords. <paramref name="token"/> and <paramref name="id"/> are set to default values.</item>
             
             <item>If a user with the given <paramref name="email"/> exist and the corresponding user is flagged as blocked (See <see cref="M:Sinbadsoft.Lib.UserManagement.IUserManager.SetBlocked(System.Int32,System.Boolean)"/>),
             then <see cref="F:Sinbadsoft.Lib.UserManagement.RegisterResult.UserBlocked"/> is returned. <paramref name="token"/> is set to default value and <paramref name="id"/> is set to the existing user id.</item>
             <item></item>
            
             <item>If a user with the given <paramref name="email"/> exist and the corresponding user is not blocked,
             then <see cref="F:Sinbadsoft.Lib.UserManagement.RegisterResult.DuplicateEmail"/> is returned.
             <paramref name="token"/> is set to default value and <paramref name="id"/> is set to the existing user id.</item>
             </list>
             
             </summary>
             <param name="email">User's email. Should be well formed and unique per user.</param>
             <param name="password">User's password. Can be null and set later using <see cref="M:Sinbadsoft.Lib.UserManagement.IUserManager.CheckAndClearVerificationToken(System.Int32,Sinbadsoft.Lib.UserManagement.VerificationToken,System.String)"/></param>
             <param name="token">Set to the generated email verification token.</param>
             <param name="id">Set to the created, if creation successful, or existing user identifier.</param>
             <returns>The status of the registration process.</returns>
        </member>
        <member name="F:Sinbadsoft.Lib.UserManagement.VerificationToken.DataLength">
            <summary>
            8 bytes to store a <see cref="T:System.DateTime"/> and 16 bytes for the random part.
            </summary>
        </member>
        <member name="M:Sinbadsoft.Lib.UserManagement.UserManager.#ctor(System.String,System.String,Sinbadsoft.Lib.UserManagement.IPasswordHasher)">
            <summary>
            Initializes a new instance of the <see cref="T:Sinbadsoft.Lib.UserManagement.UserManager"/> class with
            a database provider invariant name, a connection string and a password hasher.
            </summary>
            <param name="providerName">Invariant name of a provider. Used to get a used to get <see cref="T:System.Data.Common.DbProviderFactory"/>.</param>
            <param name="connectionString">Connection string to connect to the database.</param>
            <param name="hasher">Password hashing strategy.</param>
        </member>
        <member name="M:Sinbadsoft.Lib.UserManagement.Authentication.IAuthenticationTokenManager.Set(System.String,System.Int32,System.Boolean,System.String)">
            <summary>
            Sets a cookie with the crytpted authentication token. The token embeds the provided
            <paramref name="email"/>, <paramref name="id"/> and optional additional data <paramref name="data"/>.
            </summary>
            <param name="email">User email.</param>
            <param name="id">User identifier.</param>
            <param name="persistent"><see langword="true"/> to create a persistent cookie, <see langword="false"/> otherwie.</param>
            <param name="data">Extra data to embedd in the authentication cookie. Should be short.</param>
        </member>
        <member name="M:Sinbadsoft.Lib.UserManagement.Authentication.IAuthenticationTokenManager.Remove">
            <summary>
            Removes the authentication token cookie.
            </summary>
        </member>
        <member name="M:Sinbadsoft.Lib.UserManagement.Authentication.IAuthenticationTokenManager.Verify">
            <summary>
            Decrypts and extracts the user information embedded in the authentication ticket.
            If the ticket is invalid or has bad format, the authentication is revoked
            and the token is removed using <see cref="M:Sinbadsoft.Lib.UserManagement.Authentication.IAuthenticationTokenManager.Remove"/>.
            </summary>
            <returns>The user information embedded in the authentication ticket.</returns>
        </member>
        <member name="T:Sinbadsoft.Lib.UserManagement.Authentication.AuthenticationTokenManager">
            <summary>
            An implementation of <see cref="T:Sinbadsoft.Lib.UserManagement.Authentication.IAuthenticationTokenManager"/> based on <see cref="T:System.Web.Security.FormsAuthentication"/>.
            </summary>
        </member>
    </members>
</doc>
